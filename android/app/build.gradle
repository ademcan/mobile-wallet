apply plugin: "com.android.application"
apply plugin: 'com.google.protobuf'

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

// get keystore password from Mac keychain access
def getPassword(String currentUser, String keyChain) {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    exec {
        commandLine 'security', '-q', 'find-generic-password', '-s', keyChain, '-w'
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue true
    }
    //noinspection GroovyAssignabilityCheck
    stdout.toString().trim()
}

def pass = getPassword("abilican","android_keystore")

android {

    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

//    lintOptions {
//        abortOnError false
//    }

    defaultConfig {
        // Enabling multidex support.
        multiDexEnabled true
        applicationId "com.theqrl"
        minSdkVersion 23
        targetSdkVersion 27
        versionCode 8
        versionName "2.2"

        testBuildType System.getProperty('testBuildType', 'debug')  //this will later be used to control the test apk build type
        missingDimensionStrategy "minReactNative", "minReactNative46" //read note
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }

        externalNativeBuild {
            cmake {
                //arguments '-DANDROID_STL=c++_static'
                arguments '-DANDROID_STL=c++_shared'
            }
        }
    }

//    signingConfigs {
//        release {
//            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
//                storeFile file(MYAPP_RELEASE_STORE_FILE)
////                storePassword MYAPP_RELEASE_STORE_PASSWORD
//                storePassword pass
//                keyAlias MYAPP_RELEASE_KEY_ALIAS
////                keyPassword MYAPP_RELEASE_KEY_PASSWORD
//                keyPassword pass
//            }
//        }
//    }


    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        debug {
            debuggable true
            initWith debug
            jniDebuggable true
            externalNativeBuild {
                ndkBuild {
                    cFlags "-DDEBUG=1"
                }
            }
        }
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
//            signingConfig signingConfigs.release
            // change the default name of the generated apk
            applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "qrlwallet-${defaultConfig.versionName}.apk"
                }
            }

        }
    }
    configurations.all {
        resolutionStrategy.force 'org.hamcrest:hamcrest-core:1.3'
    }
    lintOptions {
        disable 'GoogleAppIndexingWarning', 'HardcodedText', 'InvalidPackage'
        textReport true
        textOutput "stdout"
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    externalNativeBuild {
        cmake {
            path '../../CMakeLists.txt'
        }
    }

}


buildscript {
    repositories {
        mavenCentral()
        google()

    }
    dependencies {
        // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier
        // gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
//        classpath 'com.android.tools.build:gradle:3.2.0'

    }
}



subprojects {
    project.configurations.all {
        afterEvaluate {project ->
            if (project.hasProperty("android")) {
                android {
//                    compileSdkVersion 26
//                    buildToolsVersion '26.0.2'
                }
            }
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    plugins {
        javalite {
            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.13.1' // CURRENT_GRPC_VERSION
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }

//        all()*.plugins {
//            grpc {}
//        }


//        all().each { task ->
//            task.builtins {
//                remove java
//            }
//            task.plugins {
//                javalite { }
//            }
//        }
    }
}


dependencies {
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-shimmer')
    compile project(':react-native-background-task')
    compile project(':react-native-background-timer')
    compile project(':react-native-vector-icons')

//    compile project(':react-native-camera')
    compile (project(':react-native-camera')){
        exclude group: "com.android.support"
        exclude group: "com.google.android.gms"
    }
    compile ('com.android.support:exifinterface:26.0.1') {
        force = true;
    }
    compile ('com.google.android.gms:play-services-vision:11.6.0') {
       force = true;
    }

//    compile project(':react-native-device-info')

    implementation(project(":react-native-device-info"),  {
        exclude group: "com.google.android.gms"
    })
    implementation "com.google.android.gms:play-services-gcm:16.1.0"


    compile project(':react-native-udp')
    compile project(':react-native-tcp')
    compile project(':react-native-os')
    compile project(':react-native-randombytes')
    compile fileTree(dir: "libs", include: ["*.jar"])


//    androidTestImplementation(project(path: ":detox"))
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test:rules:1.0.1'

//    compile "com.android.support:appcompat-v7:27.1.1"
    implementation "com.facebook.react:react-native:+"  // From node_modules    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    implementation 'com.google.protobuf:protobuf-lite:3.0.0'

    compile 'io.grpc:grpc-okhttp:1.13.1' // CURRENT_GRPC_VERSION
    compile 'io.grpc:grpc-protobuf-lite:1.13.1' // CURRENT_GRPC_VERSION
    compile 'io.grpc:grpc-stub:1.13.1' // CURRENT_GRPC_VERSION
    compile 'javax.annotation:javax.annotation-api:1.2'

    compile 'com.android.support.test:testing-support-lib:0.1'
    compile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
